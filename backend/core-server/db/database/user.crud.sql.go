// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.crud.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    local_username,
    local_password,
    oauth_id,
    oauth_provider,
    oauth_name,
    email,
    profile_picture
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
) RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type CreateUserParams struct {
	UserID         uuid.UUID
	LocalUsername  string
	LocalPassword  string
	OauthID        string
	OauthProvider  string
	OauthName      sql.NullString
	Email          string
	ProfilePicture sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.LocalUsername,
		arg.LocalPassword,
		arg.OauthID,
		arg.OauthProvider,
		arg.OauthName,
		arg.Email,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByLocalUsername = `-- name: GetUserByLocalUsername :one
SELECT user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at FROM users WHERE local_username = $1
`

func (q *Queries) GetUserByLocalUsername(ctx context.Context, localUsername string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLocalUsername, localUsername)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByOauthId = `-- name: GetUserByOauthId :one
SELECT user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at FROM users WHERE oauth_id = $1
`

func (q *Queries) GetUserByOauthId(ctx context.Context, oauthID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByOauthId, oauthID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
SELECT user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByUserId(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserId, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByPage = `-- name: GetUsersByPage :many
SELECT user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetUsersByPageParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsersByPage(ctx context.Context, arg GetUsersByPageParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.LocalUsername,
			&i.LocalPassword,
			&i.OauthProvider,
			&i.OauthID,
			&i.Email,
			&i.OauthName,
			&i.WalletAddress,
			&i.ProfilePicture,
			&i.RsaPublicKey,
			&i.HashedSecret,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    local_username = $2,
    local_password = $3,
    oauth_id = $4,
    oauth_provider = $5,
    oauth_name = $6,
    email = $7,
    profile_picture = $8,
    wallet_address = $9,
    rsa_public_key = $10,
    hashed_secret = $11
WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type UpdateUserParams struct {
	UserID         uuid.UUID
	LocalUsername  string
	LocalPassword  string
	OauthID        string
	OauthProvider  string
	OauthName      sql.NullString
	Email          string
	ProfilePicture sql.NullString
	WalletAddress  sql.NullString
	RsaPublicKey   sql.NullString
	HashedSecret   sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.LocalUsername,
		arg.LocalPassword,
		arg.OauthID,
		arg.OauthProvider,
		arg.OauthName,
		arg.Email,
		arg.ProfilePicture,
		arg.WalletAddress,
		arg.RsaPublicKey,
		arg.HashedSecret,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users SET email = $2 WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type UpdateUserEmailParams struct {
	UserID uuid.UUID
	Email  string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.UserID, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET local_password = $2 WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	UserID        uuid.UUID
	LocalPassword string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.UserID, arg.LocalPassword)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSecurityDetails = `-- name: UpdateUserSecurityDetails :one
UPDATE users SET rsa_public_key = $2 AND hashed_secret = $3 WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type UpdateUserSecurityDetailsParams struct {
	UserID       uuid.UUID
	RsaPublicKey sql.NullString
	HashedSecret sql.NullString
}

func (q *Queries) UpdateUserSecurityDetails(ctx context.Context, arg UpdateUserSecurityDetailsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserSecurityDetails, arg.UserID, arg.RsaPublicKey, arg.HashedSecret)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserWalletAddress = `-- name: UpdateUserWalletAddress :one
UPDATE users SET wallet_address = $2 WHERE user_id = $1 RETURNING user_id, local_username, local_password, oauth_provider, oauth_id, email, oauth_name, wallet_address, profile_picture, rsa_public_key, hashed_secret, created_at, updated_at
`

type UpdateUserWalletAddressParams struct {
	UserID        uuid.UUID
	WalletAddress sql.NullString
}

func (q *Queries) UpdateUserWalletAddress(ctx context.Context, arg UpdateUserWalletAddressParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserWalletAddress, arg.UserID, arg.WalletAddress)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LocalUsername,
		&i.LocalPassword,
		&i.OauthProvider,
		&i.OauthID,
		&i.Email,
		&i.OauthName,
		&i.WalletAddress,
		&i.ProfilePicture,
		&i.RsaPublicKey,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
