package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/SohamRatnaparkhi/git-store/backend/core-server/db/database"
	"github.com/SohamRatnaparkhi/git-store/backend/core-server/graph/model"
	"github.com/google/uuid"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: RegisterUser - registerUser"))
	userId := uuid.New()
	_, err := r.dbQueries.CreateUser(ctx, database.CreateUserParams{
		Email:         input.Email,
		UserID:        userId,
		LocalUsername: input.LocalUsername,
		LocalPassword: input.LocalHashedPassword,
	})

	if err != nil {
		return nil, err
	}
	return &model.User{
		UserID:              userId.String(),
		Email:               input.Email,
		LocalUsername:       &input.LocalUsername,
		LocalHashedPassword: &input.LocalHashedPassword,
		OAuthProviders:      nil,
		AccountType:         input.AccountType,
		WalletAddress:       nil,
		RsaPublicKey:        "",
		HashedSecret:        "",
	}, nil
}

// RegisterUserOAuth is the resolver for the registerUserOAuth field.
func (r *mutationResolver) RegisterUserOAuth(ctx context.Context, input model.RegisterUserOAuthInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: RegisterUserOAuth - registerUserOAuth"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	// panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
	// convert string to uuid
	userId, err := uuid.Parse(input.UserID)
	if err != nil {
		return nil, err
	}
	_, err = r.dbQueries.UpdateUser(ctx, database.UpdateUserParams{
		UserID: userId,
		Email:  *input.Email,
	})
	if err != nil {
		return nil, err
	}
	return &model.User{
		UserID:              input.UserID,
		Email:               *input.Email,
		LocalUsername:       input.LocalUsername,
		LocalHashedPassword: input.LocalHashedPassword,
		OAuthProviders:      input.OAuthProviders,
		AccountType:         *input.AccountType,
		WalletAddress:       input.WalletAddress,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// LoginUser is the resolver for the loginUser field.
func (r *queryResolver) LoginUser(ctx context.Context, input model.LoginUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: LoginUser - loginUser"))
}

// LoginUserOAuth is the resolver for the loginUserOAuth field.
func (r *queryResolver) LoginUserOAuth(ctx context.Context, input model.LoginUserOAuthInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: LoginUserOAuth - loginUserOAuth"))
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) LoginUser(ctx context.Context, input model.LoginUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: LoginUser - loginUser"))
}
func (r *mutationResolver) LoginUserOAuth(ctx context.Context, input model.LoginUserOAuthInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: LoginUserOAuth - loginUserOAuth"))
}
