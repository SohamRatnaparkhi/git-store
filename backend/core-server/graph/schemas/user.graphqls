directive @authorized on FIELD_DEFINITION

type User {
    userId: ID!
    localUsername: String
    localHashedPassword: String
    oAuthProviders: String
    email: String!
    accountType: String!
    walletAddress: String
    rsaPublicKey: String!
    hashedSecret: String!
}

input RegisterUserInput {
    localUsername: String!
    localHashedPassword: String!
    email: String!
    accountType: String!
}

input RegisterUserOAuthInput {
    oAuthProviders: String!
    email: String!
    accountType: String!
}

input LoginUserInput {
    email: String!
    localHashedPassword: String!
}

input LoginUserOAuthInput {
    oAuthProviders: String!
}

input UpdateUserInput {
    localUsername: String
    localHashedPassword: String
    oAuthProviders: String
    email: String
    accountType: String
    walletAddress: String
    rsaPublicKey: String
    hashedSecret: String
    profilePicture: String
}

type AuthResponse {
    token: String!
    user: User!
}

extend type Query {
    user(userId: ID!): User @authorized
    users(pageNo: Int): [User]
    loginUser(input: LoginUserInput!): AuthResponse
    loginUserOAuth(input: LoginUserOAuthInput!): AuthResponse
}

extend type Mutation {
    registerUser(input: RegisterUserInput!): User
    registerUserOAuth(input: RegisterUserOAuthInput!): User
    updateUser(input: UpdateUserInput!): User @authorized
    deleteUser(userId: ID!): User @authorized
}