// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthResponse struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type CreateRepoInput struct {
	UserID      string     `json:"user_id"`
	Name        string     `json:"name"`
	URL         string     `json:"url"`
	Platform    string     `json:"platform"`
	Visibility  Visibility `json:"visibility"`
	IsRelease   bool       `json:"is_release"`
	IsBackup    bool       `json:"is_backup"`
	Description *string    `json:"description,omitempty"`
}

type LoginUserInput struct {
	Email               string `json:"email"`
	LocalHashedPassword string `json:"localHashedPassword"`
}

type LoginUserOAuthInput struct {
	OAuthProviders string `json:"oAuthProviders"`
}

type Mutation struct {
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Query struct {
}

type RegisterUserInput struct {
	LocalUsername       string `json:"localUsername"`
	LocalHashedPassword string `json:"localHashedPassword"`
	Email               string `json:"email"`
	AccountType         string `json:"accountType"`
}

type RegisterUserOAuthInput struct {
	OAuthProviders string `json:"oAuthProviders"`
	Email          string `json:"email"`
	AccountType    string `json:"accountType"`
}

type Repo struct {
	RepoID      string     `json:"repo_id"`
	UserID      string     `json:"user_id"`
	Name        string     `json:"name"`
	URL         string     `json:"url"`
	Platform    string     `json:"platform"`
	Visibility  Visibility `json:"visibility"`
	IsRelease   bool       `json:"is_release"`
	IsBackup    bool       `json:"is_backup"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   *string    `json:"created_at,omitempty"`
	UpdatedAt   *string    `json:"updated_at,omitempty"`
}

type RepoFilterInput struct {
	UserID     string      `json:"user_id"`
	Visibility *Visibility `json:"visibility,omitempty"`
	IsRelease  *bool       `json:"is_release,omitempty"`
	IsBackup   *bool       `json:"is_backup,omitempty"`
	Platform   *string     `json:"platform,omitempty"`
	Name       *string     `json:"name,omitempty"`
}

type RepoList struct {
	Repos []*Repo `json:"repos,omitempty"`
	Total *int    `json:"total,omitempty"`
}

type RepoListResponse struct {
	Success bool      `json:"success"`
	Message *string   `json:"message,omitempty"`
	Data    *RepoList `json:"data,omitempty"`
	PageNo  *int      `json:"pageNo,omitempty"`
}

type RepoResponse struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
	Data    *Repo   `json:"data,omitempty"`
}

type Todo struct {
	ID   string    `json:"id"`
	Text string    `json:"text"`
	Done bool      `json:"done"`
	User *UserCopy `json:"user"`
}

type UpdateRepoInput struct {
	Name        *string     `json:"name,omitempty"`
	URL         *string     `json:"url,omitempty"`
	Platform    *string     `json:"platform,omitempty"`
	Visibility  *Visibility `json:"visibility,omitempty"`
	IsRelease   *bool       `json:"is_release,omitempty"`
	IsBackup    *bool       `json:"is_backup,omitempty"`
	Description *string     `json:"description,omitempty"`
}

type UpdateUserInput struct {
	LocalUsername       *string `json:"localUsername,omitempty"`
	LocalHashedPassword *string `json:"localHashedPassword,omitempty"`
	OAuthProviders      *string `json:"oAuthProviders,omitempty"`
	Email               *string `json:"email,omitempty"`
	AccountType         *string `json:"accountType,omitempty"`
	WalletAddress       *string `json:"walletAddress,omitempty"`
	RsaPublicKey        *string `json:"rsaPublicKey,omitempty"`
	HashedSecret        *string `json:"hashedSecret,omitempty"`
	ProfilePicture      *string `json:"profilePicture,omitempty"`
}

type User struct {
	UserID              string  `json:"userId"`
	LocalUsername       *string `json:"localUsername,omitempty"`
	LocalHashedPassword *string `json:"localHashedPassword,omitempty"`
	OAuthProviders      *string `json:"oAuthProviders,omitempty"`
	Email               string  `json:"email"`
	AccountType         string  `json:"accountType"`
	WalletAddress       *string `json:"walletAddress,omitempty"`
	RsaPublicKey        string  `json:"rsaPublicKey"`
	HashedSecret        string  `json:"hashedSecret"`
}

type UserCopy struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Visibility string

const (
	VisibilityPublic  Visibility = "PUBLIC"
	VisibilityPrivate Visibility = "PRIVATE"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityPrivate,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityPrivate:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
