package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/SohamRatnaparkhi/git-store/backend/core-server/graph/model"
)

// CreateRepo is the resolver for the createRepo field.
func (r *mutationResolver) CreateRepo(ctx context.Context, input model.CreateRepoInput) (*model.RepoResponse, error) {
	repo, err := r.repoHandlers.CreateRepoHandler(ctx, input)
	if err != nil {
		return nil, err
	}
	return repo, nil
}

// UpdateRepo is the resolver for the updateRepo field.
func (r *mutationResolver) UpdateRepo(ctx context.Context, repoID string, input model.UpdateRepoInput) (*model.RepoResponse, error) {
	repo, err := r.repoHandlers.UpdateRepoHandler(ctx, repoID, input)
	if err != nil {
		return nil, err
	}
	return repo, nil
}

// DeleteRepo is the resolver for the deleteRepo field.
func (r *mutationResolver) DeleteRepo(ctx context.Context, repoID string) (*model.RepoResponse, error) {
	repo, err := r.repoHandlers.DeleteRepoHandler(ctx, repoID)
	if err != nil {
		return nil, err
	}
	return repo, nil
}

// GetRepos is the resolver for the getRepos field.
func (r *queryResolver) GetRepos(ctx context.Context, pageNo *int, pageSize *int) (*model.RepoListResponse, error) {
	panic(fmt.Errorf("not implemented: GetRepos - getRepos"))
}

// Repo is the resolver for the repo field.
func (r *queryResolver) Repo(ctx context.Context, repoID *string, url *string) (*model.RepoResponse, error) {
	repo, err := r.repoHandlers.GetRepoHandler(ctx, repoID, url)
	if err != nil {
		return nil, err
	}
	return repo, nil
}

// Repos is the resolver for the repos field.
func (r *queryResolver) Repos(ctx context.Context, input *model.RepoFilterInput, pageNo *int, pageSize *int) (*model.RepoListResponse, error) {
	repos, err := r.repoServices.GetRepoBasedOnFilters(ctx, input, pageNo, pageSize)
	if err != nil {
		return nil, err
	}
	return repos, nil
}
